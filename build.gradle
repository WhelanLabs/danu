buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:5.4.0"
    }
}

plugins {
    id 'base' // Apply the base plugin for basic task support
}

apply plugin: "de.undercouch.download" // Correctly apply the plugin

def downloadDir = file("download")
def installerImageDir = file("installer_image")
def filesToDownload = [
    "apache-nutch-1.20-bin.zip": "https://dlcdn.apache.org/nutch/1.20/apache-nutch-1.20-bin.zip",
    "hadoop-3.4.1.tar.gz": "https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.4.1/hadoop-3.4.1.tar.gz",
    "winutils.exe": "https://github.com/cdarlint/winutils/raw/refs/heads/master/hadoop-3.3.6/bin/winutils.exe",
    "hadoop.dll": "https://github.com/cdarlint/winutils/raw/refs/heads/master/hadoop-3.3.6/bin/hadoop.dll",
    "solr-9.7.0.tgz": "https://dlcdn.apache.org/solr/solr/9.7.0/solr-9.7.0.tgz"
]

// Ensure the download directory exists
task prepareDownloadDir {
    doLast {
        if (!downloadDir.exists()) {
            downloadDir.mkdirs()
        }
    }
}

// Ensure the installer image directory exists
task prepareInstallerImageDir {
    doLast {
        if (!installerImageDir.exists()) {
            installerImageDir.mkdirs()
        }
    }
}

// Define tasks for each file to download
filesToDownload.each { fileName, url ->
    tasks.register("download${fileName.capitalize()}", de.undercouch.gradle.tasks.download.Download) {
        onlyIf {
            // Skip download if file already exists
            !file("${downloadDir}/${fileName}").exists()
        }
        src url
        dest file("${downloadDir}/${fileName}")
    }
}

// Task to decompress files
task decompressFiles {
    dependsOn prepareInstallerImageDir, "downloadApache-nutch-1.20-bin.zip", "downloadHadoop-3.4.1.tar.gz"
    doLast {
        // Decompress Nutch zip file
        def nutchZipFile = file("${downloadDir}/apache-nutch-1.20-bin.zip")
        if (nutchZipFile.exists() && nutchZipFile.length() > 0) {
            try {
                copy {
                    from zipTree(nutchZipFile)
                    into installerImageDir
                }
            } catch (Exception e) {
                throw new GradleException("Failed to decompress ${nutchZipFile}: ${e.message}")
            }
        } else {
            throw new GradleException("File ${nutchZipFile} does not exist or is empty.")
        }
		
        // Decompress Hadoop tar.gz file
        def hadoopTarFile = file("${downloadDir}/hadoop-3.4.1.tar.gz")
        if (hadoopTarFile.exists() && hadoopTarFile.length() > 0) {
            try {
                copy {
                    from tarTree(resources.gzip(hadoopTarFile))
                    into installerImageDir
                }
            } catch (Exception e) {
                throw new GradleException("Failed to decompress ${hadoopTarFile}: ${e.message}")
            }
        } else {
            throw new GradleException("File ${hadoopTarFile} does not exist or is empty.")
        }

    }
}

// Aggregate task to download all files
task downloadAll {
    dependsOn filesToDownload.keySet().collect { "download${it.capitalize()}" } // Explicitly depend on individual download tasks
}

// Build installer task
task buildInstaller {
    dependsOn downloadAll, decompressFiles
}

// Clean task to delete the installer image directory
task cleanInstallerImage {
    doLast {
        if (installerImageDir.exists()) {
            installerImageDir.deleteDir()
        }
    }
}
