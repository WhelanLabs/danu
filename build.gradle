import java.net.HttpURLConnection
import java.net.URL
import java.net.Socket
import java.io.OutputStreamWriter

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:5.4.0"
    }
}

plugins {
    id 'base' // Apply the base plugin for basic task support
}

apply plugin: "de.undercouch.download" // Correctly apply the plugin

def downloadDir = file("download")
def installerImageDir = file("installer_image")
def solrHome = file("installer_image/solr-8.11.4")
def nutchRuntimeHome = file("installer_image/apache-nutch-1.20")
def filesToDownload = [
    "apache-nutch-1.20-bin.zip": "https://dlcdn.apache.org/nutch/1.20/apache-nutch-1.20-bin.zip",
    "hadoop-3.3.6.tar.gz": "https://dlcdn.apache.org/hadoop/common/hadoop-3.3.6/hadoop-3.3.6.tar.gz",
    "winutils.exe": "https://github.com/cdarlint/winutils/raw/refs/heads/master/hadoop-3.3.6/bin/winutils.exe",
    "hadoop.dll": "https://github.com/cdarlint/winutils/raw/refs/heads/master/hadoop-3.3.6/bin/hadoop.dll",
    "solr-8.11.4.zip": "https://dlcdn.apache.org/lucene/solr/8.11.4/solr-8.11.4.zip"
]

// Ensure the download directory exists
task prepareDownloadDir {
    doLast {
        if (!downloadDir.exists()) {
            downloadDir.mkdirs()
        }
    }
}

// Ensure the installer image directory exists
task prepareInstallerImageDir {
    doLast {
        if (!installerImageDir.exists()) {
            installerImageDir.mkdirs()
        }
    }
}

// Define tasks for each file to download
filesToDownload.each { fileName, url ->
    tasks.register("download${fileName.capitalize()}", de.undercouch.gradle.tasks.download.Download) {
        onlyIf {
            // Skip download if file already exists
            !file("${downloadDir}/${fileName}").exists()
        }
        src url
        dest file("${downloadDir}/${fileName}")
    }
}

// Task to decompress files
task decompressFiles {
    dependsOn prepareInstallerImageDir, "downloadApache-nutch-1.20-bin.zip", "downloadHadoop-3.3.6.tar.gz"
    doLast {
        // Decompress Nutch zip file
        def nutchZipFile = file("${downloadDir}/apache-nutch-1.20-bin.zip")
        def nutchExtractedDir = file("${installerImageDir}/apache-nutch-1.20") // Expected directory after extraction
        if (!nutchExtractedDir.exists()) { // Only decompress if directory does not exist
            if (nutchZipFile.exists() && nutchZipFile.length() > 0) {
                try {
                    copy {
                        from zipTree(nutchZipFile)
                        into installerImageDir
                    }
                } catch (Exception e) {
                    throw new GradleException("Failed to decompress ${nutchZipFile}: ${e.message}")
                }
            } else {
                throw new GradleException("File ${nutchZipFile} does not exist or is empty.")
            }
        } else {
            println "Nutch files already decompressed, skipping."
        }

        // Decompress Hadoop tar.gz file
        def hadoopTarFile = file("${downloadDir}/hadoop-3.3.6.tar.gz")
        def hadoopExtractedDir = file("${installerImageDir}/hadoop-3.3.6") // Expected directory after extraction
        if (!hadoopExtractedDir.exists()) { // Only decompress if directory does not exist
            if (hadoopTarFile.exists() && hadoopTarFile.length() > 0) {
                try {
                    copy {
                        from tarTree(resources.gzip(hadoopTarFile))
                        into installerImageDir
                    }
                } catch (Exception e) {
                    throw new GradleException("Failed to decompress ${hadoopTarFile}: ${e.message}")
                }
            } else {
                throw new GradleException("File ${hadoopTarFile} does not exist or is empty.")
            }
        } else {
            println "Hadoop files already decompressed, skipping."
        }

        // Decompress Solr zip file
        def solrZipFile = file("${downloadDir}/solr-8.11.4.zip")
        def solrExtractedDir = file("${installerImageDir}/solr-8.11.4") // Expected directory after extraction
        if (!solrExtractedDir.exists()) { // Only decompress if directory does not exist
            if (solrZipFile.exists() && solrZipFile.length() > 0) {
                try {
                    copy {
                        from zipTree(solrZipFile)
                        into installerImageDir
                    }
                } catch (Exception e) {
                    throw new GradleException("Failed to decompress ${solrZipFile}: ${e.message}")
                }
            } else {
                throw new GradleException("File ${solrZipFile} does not exist or is empty.")
            }
        } else {
            println "Solr files already decompressed, skipping."
        }
    }
}


// Aggregate task to download all files
task downloadAll {
    dependsOn filesToDownload.keySet().collect { "download${it.capitalize()}" } // Explicitly depend on individual download tasks
}

// Task to set up the Solr Nutch core
task setupSolrCore {
    dependsOn prepareInstallerImageDir
    doLast {
        def nutchConfigSet = new File(solrHome, "server/solr/configsets/nutch")
        def defaultConfigSet = new File(solrHome, "server/solr/configsets/_default")
        def nutchSchemaFile = new File(nutchRuntimeHome, "plugins/indexer-solr/schema.xml")

        // Create the Nutch Solr core directory
        if (!nutchConfigSet.exists()) {
            nutchConfigSet.mkdirs()
        }

        // Copy default Solr config to the Nutch core directory
        copy {
            from defaultConfigSet
            into nutchConfigSet
        }

        // Copy Nutch schema.xml
        if (nutchSchemaFile.exists()) {
            copy {
                from nutchSchemaFile
                into new File(nutchConfigSet, "conf")
            }
        } else {
            throw new GradleException("Nutch schema.xml not found at ${nutchSchemaFile}")
        }

        // Remove managed-schema if present
        def managedSchema = new File(nutchConfigSet, "conf/managed-schema")
        if (managedSchema.exists()) {
            managedSchema.delete()
        }

        println "Solr Nutch core setup completed."
    }
}

// Task to start Solr server
task startSolr {
    doLast {
        def solrBin = new File(solrHome, "bin${File.separator}solr.cmd").absolutePath
        println "Starting Solr from directory: ${solrHome}"
        println "Executing command: ${solrBin} start -f"
        
        // Start Solr in the background
        def processBuilder = new ProcessBuilder("cmd", "/c", "\"${solrBin}\" start -f")
        processBuilder.directory(new File(solrHome.toString()))
        def process = processBuilder.start()

        println "Solr has been started. Waiting for it to be ready..."
        
        // Health check to confirm Solr is ready
        def solrUrl = "http://localhost:8983/solr/"
        def retries = 20
        def interval = 5000 // milliseconds

        while (retries > 0) {
            try {
                def connection = (HttpURLConnection) new URL(solrUrl).openConnection()
                connection.setRequestMethod("GET")
                connection.setConnectTimeout(2000)
                connection.setReadTimeout(2000)
                connection.connect()
                
                if (connection.responseCode == 200) {
                    println "Solr is ready!"
                    return
                }
            } catch (Exception e) {
                // Ignore exceptions during retry attempts
            }

            retries--
            Thread.sleep(interval)
            println "Waiting for Solr to be ready... (Remaining retries: $retries)"
        }

        throw new GradleException("Solr failed to start within the expected time.")
    }
}


// Task to create the Nutch Solr core
task createNutchCore {
    dependsOn setupSolrCore, startSolr
	
    def stopOutput = new ByteArrayOutputStream()
	
    doLast {
        def solrBin = new File(solrHome, "bin${File.separator}solr.cmd").absolutePath

        println "creating nutch core..."
        exec {
            workingDir solrHome
            commandLine "cmd.exe", "/c", "createNutchCore.bat"
        }
		
        println "finished createNutchCore."
    }
}


task copyNutchContents(type: Copy) {
    // Specify the source directory
    from 'src/nutch'

    // Specify the destination directory
    into 'installer_image/apache-nutch-1.20'

    // Print a message after the task is completed
    doLast {
        println "All contents from 'src/nutch' have been copied to 'installer_image/apache-nutch-1.20'."
    }
}


task copySolrContents(type: Copy) {
    // Specify the source directory
    from 'src/solr'

    // Specify the destination directory
    into 'installer_image/solr-8.11.4'

    // Print a message after the task is completed
    doLast {
        println "All contents from 'src/solr' have been copied to 'installer_image/solr-8.11.4'."
    }
}


task addHadoopWinFiles(type: Copy) {
    // Define the source and destination for the files
    from('download') {
        include 'hadoop.dll', 'winutils.exe'
    }

    // Specify the destination directory
    into 'installer_image/hadoop-3.3.6/bin'

    // Print a message after the task is completed
    doLast {
        println "Files 'hadoop.dll' and 'winutils.exe' have been copied to 'installer_image/hadoop-3.3.6/bin'."
    }
}


// Build installer task
task buildInstaller {
    dependsOn downloadAll, decompressFiles, addHadoopWinFiles, copyNutchContents, copySolrContents, createNutchCore

    // Task relationships for sequential execution
    downloadAll {
        finalizedBy decompressFiles
    }
    decompressFiles {
        finalizedBy addHadoopWinFiles
    }
    addHadoopWinFiles {
        finalizedBy copySolrContents
    }
    copySolrContents {
        finalizedBy copyNutchContents
    }
    copyNutchContents {
        finalizedBy createNutchCore
    }
	createNutchCore
}


// Clean task to delete the installer image directory
task cleanInstallerImage {
    doLast {
        if (installerImageDir.exists()) {
            installerImageDir.deleteDir()
        }
    }
}
